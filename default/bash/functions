# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Write iso file to sd card
iso2sd() {
  if [ $# -ne 2 ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable storage devices:"
    lsblk -d -o NAME,SIZE | grep -E '^(sd|mm)[a-z]' | awk '{print "/dev/"$1" ("$2")"}'
  else
    sudo sh -c "dd bs=4M status=progress oflag=sync if='$1' of='$2' && eject '$2'"
  fi
}

# Create iso file from sd card
sd2iso() {
  if [ $# -ne 2 ]; then
    echo "Usage: sd2iso <input_device> <output_file>"
    echo "Example: sd2iso /dev/sda ~/backup-sdcard.iso"
    echo -e "\nAvailable storage devices:"
    lsblk -d -o NAME,SIZE | grep -E '^(sd|mm)[a-z]' | awk '{print "/dev/"$1" ("$2")"}'
    exit 0
  fi
  last_partition=$(sudo fdisk -l "$1" | grep "^$1" | tail -1)

  if [ -n "$last_partition" ]; then
    last_part_device=$(echo "$last_partition" | awk '{print $1}')
    last_part_start=$(echo "$last_partition" | awk '{print $2}')

    # Check if last partition is ext2/3/4
    fs_type=$(sudo blkid -o value -s TYPE "$last_part_device" 2>/dev/null)

    if [[ "$fs_type" =~ ^ext[234]$ ]]; then
      # Unmount if mounted
      if mountpoint=$(findmnt -n -o TARGET "$last_part_device" 2>/dev/null); then
        sudo umount "$last_part_device"
        was_mounted=true
      fi

      # Check and repair filesystem
      sudo e2fsck -fy "$last_part_device"

      # Shrink filesystem to minimum
      sudo resize2fs -M "$last_part_device"

      # Get actual filesystem size in 4K blocks
      fs_blocks=$(sudo tune2fs -l "$last_part_device" | grep "^Block count:" | awk '{print $3}')
      fs_block_size=$(sudo tune2fs -l "$last_part_device" | grep "^Block size:" | awk '{print $3}')

      # Calculate size in 512-byte sectors with 500MB buffer
      fs_size_sectors=$(( (fs_blocks * fs_block_size / 512) + 1024000 ))
      new_part_end=$(( last_part_start + fs_size_sectors ))

      # Shrink partition
      sudo parted -s "$1" resizepart $(echo "$last_part_device" | grep -o '[0-9]*$') ${new_part_end}s

      # Remount if it was mounted
      if [ "$was_mounted" = true ]; then
        sudo mount "$last_part_device" "$mountpoint"
      fi

      # Copy up to new end with 100MB margin
      safe_sector=$((new_part_end + 204800))
      count_blocks=$((safe_sector / 8))
      sudo sh -c "dd bs=4096 count=$count_blocks status=progress if='$1' of='$2' && chown $(id -u):$(id -g) '$2'"
    else
      # Non-ext filesystem, use original end
      last_partition_end=$(echo "$last_partition" | awk '{print $3}')
      safe_sector=$((last_partition_end + 204800))
      count_blocks=$((safe_sector / 8))
      sudo sh -c "dd bs=4096 count=$count_blocks status=progress if='$1' of='$2' && chown $(id -u):$(id -g) '$2'"
    fi
  else
    # No partitions found, copy entire device
    sudo sh -c "dd bs=4096 status=progress if='$1' of='$2' && chown $(id -u):$(id -g) '$2'"
  fi
}

# Format an entire drive for a single partition using ext4
format-drive() {
  if [ $# -ne 2 ]; then
    echo "Usage: format-drive <device> <name>"
    echo "Example: format-drive /dev/sda 'My Stuff'"
    echo -e "\nAvailable drives:"
    lsblk -d -o NAME -n | awk '{print "/dev/"$1}'
  else
    echo "WARNING: This will completely erase all data on $1 and label it '$2'."
    echo -n "Are you sure you want to continue? (y/N): "
    read -r confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      sudo wipefs -a "$1"
      sudo dd if=/dev/zero of="$1" bs=1M count=100 status=progress
      sudo parted -s "$1" mklabel gpt
      sudo parted -s "$1" mkpart primary ext4 1MiB 100%
      sudo mkfs.ext4 -L "$2" "$([[ $1 == *"nvme"* ]] && echo "${1}p1" || echo "${1}1")"
      sudo chmod -R 777 "/run/media/$USER/$2"
      echo "Drive $1 formatted and labeled '$2'."
    fi
  fi
}

# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Transcode any image to JPG image that's great for shrinking wallpapers
img2jpg() {
  magick $1 -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to JPG image that's great for sharing online without being too big
img2jpg-small() {
  magick $1 -resize 1080x\> -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to compressed-but-lossless PNG
img2png() {
  magick "$1" -strip -define png:compression-filter=5 \
    -define png:compression-level=9 \
    -define png:compression-strategy=1 \
    -define png:exclude-chunk=all \
    "${1%.*}.png"
}
