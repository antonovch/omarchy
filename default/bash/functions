# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Write iso file to sd card
iso2sd() {
  if [ $# -ne 2 ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable storage devices:"
    lsblk -d -o NAME,SIZE | grep -E '^(sd|mm)[a-z]' | awk '{print "/dev/"$1" ("$2")"}'
  else
    sudo sh -c "dd bs=4M status=progress oflag=sync if='$1' of='$2' && eject '$2'"
  fi
}

# Create iso file from sd card
sd2iso() {
  if [ $# -ne 2 ]; then
    echo "Usage: sd2iso <input_device> <output_file>"
    echo "Example: sd2iso /dev/sda ~/backup-sdcard.iso"
    echo -e "\nAvailable storage devices:"
    lsblk -d -o NAME,SIZE | grep -E '^(sd|mm)[a-z]' | awk '{print "/dev/"$1" ("$2")"}'
  else
    # Get all partitions on the device
    partitions=$(sudo fdisk -l "$1" | grep "^$1" | awk '{print $1, $2, $3}')

    if [ -n "$partitions" ]; then
      max_sector=0

      # Process each partition
      while IFS= read -r line; do
        part_device=$(echo "$line" | awk '{print $1}')
        part_start=$(echo "$line" | awk '{print $2}')
        part_end=$(echo "$line" | awk '{print $3}')

        # Check if partition is mounted, if not mount it temporarily
        mount_point=$(lsblk -n -o MOUNTPOINT "$part_device" 2>/dev/null | head -1)
        temp_mount=false

        if [ -z "$mount_point" ]; then
          temp_mount=true
          mount_point="/tmp/sd2iso_temp_$$"
          mkdir -p "$mount_point"
          if sudo mount -r "$part_device" "$mount_point" 2>/dev/null; then
            used_kb=$(df "$mount_point" | tail -1 | awk '{print $3}')
            used_sectors=$((used_kb * 2))
            last_used_sector=$((part_start + used_sectors))

            sudo umount "$mount_point"
          else
            last_used_sector=$part_end
          fi
          rmdir "$mount_point" 2>/dev/null
        else
          used_kb=$(df "$mount_point" | tail -1 | awk '{print $3}')
          used_sectors=$((used_kb * 2))
          last_used_sector=$((part_start + used_sectors))
        fi

        if [ $last_used_sector -gt $max_sector ]; then
          max_sector=$last_used_sector
        fi
      done <<< "$partitions"

      # Add 100MB safety margin (204800 sectors)
      safe_sector=$((max_sector + 204800))
      count_blocks=$((safe_sector / 8))

      sudo dd bs=4096 count=$count_blocks status=progress if="$1" of="$2"
    else
      sudo dd bs=4096 status=progress if="$1" of="$2"
    fi
  fi
}

# Format an entire drive for a single partition using ext4
format-drive() {
  if [ $# -ne 2 ]; then
    echo "Usage: format-drive <device> <name>"
    echo "Example: format-drive /dev/sda 'My Stuff'"
    echo -e "\nAvailable drives:"
    lsblk -d -o NAME -n | awk '{print "/dev/"$1}'
  else
    echo "WARNING: This will completely erase all data on $1 and label it '$2'."
    echo -n "Are you sure you want to continue? (y/N): "
    read -r confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      sudo wipefs -a "$1"
      sudo dd if=/dev/zero of="$1" bs=1M count=100 status=progress
      sudo parted -s "$1" mklabel gpt
      sudo parted -s "$1" mkpart primary ext4 1MiB 100%
      sudo mkfs.ext4 -L "$2" "$([[ $1 == *"nvme"* ]] && echo "${1}p1" || echo "${1}1")"
      sudo chmod -R 777 "/run/media/$USER/$2"
      echo "Drive $1 formatted and labeled '$2'."
    fi
  fi
}

# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Transcode any image to JPG image that's great for shrinking wallpapers
img2jpg() {
  magick $1 -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to JPG image that's great for sharing online without being too big
img2jpg-small() {
  magick $1 -resize 1080x\> -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to compressed-but-lossless PNG
img2png() {
  magick "$1" -strip -define png:compression-filter=5 \
    -define png:compression-level=9 \
    -define png:compression-strategy=1 \
    -define png:exclude-chunk=all \
    "${1%.*}.png"
}
